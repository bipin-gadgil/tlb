Test Load Balancer (TLB)
========================

Basic Definition
----------------

TLB aims at splitting your test suite into a given number of mutually exclusive and collectively exhaustive units such that each unit can be executed in parallel. Assuming that tests are written independent of each other, which is a best practice in writing tests, they can be re-ordered and arranged in any fashion and TLB leverages this fact in split test suite into the given number of units and re-order the tests to, for instance, run tests that failed in last run, first(fail fast).

Balancer is meant to be hooked with your build script and test runner. This hookup ensures TLB gets appropriate callbacks when tests are about to be executed, so it can prune the list of tests to be executed to execute only a part of whole, and change test execution order etc. 

In order to do this, TLB uses historical test run data from the TLB server(or equivallent).

For details, refer to the online documentation page.


System Requirements
-------------------

Platform - Since TLB is written in Java, it is platform independent. Though we have tested it on Linux, Windows and MacOS, it should work on any platform that is Java enabled.

Java - JRE/JDK 1.6 (We recommend using Sun(Oracle) Java, however, it should work as well with OpenJDK too.)

Memory - TLB balancer component should work with about 32MB of RAM for most setups.


Getting TLB
-----------

TLB can be downloaded from http://code.google.com/p/tlb/downloads/list

TLB is distributed as a 'tarred + gziped' file(.tar.gz). Uncompressing the archive produces a directory named 'tlb-XXXX'.

To unarchive TLB distribution:

You can use "tar -zxvf tlb-XXXX.tar.gz" on *nix(Linux, Unix or MacOS). Windows users can unarchive the distribution using WinRAR, 7z or the Zip Utility(bundled with recent versions of Windows, the zip utility bundled with older versions may not work).


Artifacts: TLB(Archive Contents/Downloads)
------------------------------------------

tlb-all-gXXX.jar         : Standalone TLB jar file. This can be used to spin up the TLB server or balancer server.
tlb-gXXX.jar             : TLB jar file(not standalone). If using TLB on java project, this is what you need in build/test classpath.
lib/*.jar                : Libraries that TLB depends on. If you are using TLB in a java project, you need to have these in the build/test classpath too.
server.sh and server.bat : Utility script to manage TLB server from the command line(for *nix and Windows respectively).
examples/                : This directory has tiny TLB enabled projects written in different languages, using different build and testing frameworks that TLB supports. The 'examples' directory has multiple sub-projects named after build and/or testing framework used. Every project in examples has a shell script call 'run_balanced.sh' which executes project's test-cases balanced between two partitions. Drop into example/<project-dir> directory and invoke './run_balanced.sh' on the shell to execute one of these.

Note for Ruby users: Ruby example projects depend on the corresponding TLB gem being installed. For instance, you will need to 'gem install tlb-rspec2' before you can execute examples/rspec2_example specs.


Usage(Balancer)
---------------

Please ensure a suitable version of Java is installed. We highly recomend reading 'Quick Start' page on TLB website. This page has typical build script fragments you can borrow, or refer to, while setting up 'load-balanced-test-runner' task in your build script(s).

If you are using TLB in a Java project, you can add the jars in this distribution to your test classpath. This means, you will have to copy tlb-gXXXX.jar and other jars that TLB depends on(which are bundled alongwith, in the sub-directory named 'lib'), to your project's classpath.

For any other environments(for instance, Ruby), you only need to ensure java(the command) can be invoked at the console prompt(i.e. the command is available on PATH). No copying of jar(s) or any other scripts is necessary for Ruby support as tlb ruby-gems are self-sufficient and stand-alone.


Usage(Server)
-------------

To start the TLB server, execute: "server.sh start"(on *nix) or "server.bat start"(on windows) from the directory extracted out of TLB archive(TLB download archive extracts to a directory named tlb-XXX(where XXX is the version number). 

Feel free to make changes to the respective scripts to tweak values TLB Server uses for exposed configuration variables. Please visit the Configuration Reference page on the TLB website(documentation section) to get detailed description of role and possible values for each of these environment variables.


Examples
--------

TLB team maintains a project called sample_projects that has several tiny projects(written in different languages using varity of testing and build frameworks), that are meant to demonstrate balancing/re-ordering and provide new users a working project to play with, before incorporating test-load-balancing in their own projects.

This is also acts as a good proving ground to play around with configuration variables and to understand the effect/implication of changing different parameters.

The tiny projects under this directory have test-cases that are executed by a helper script named 'run_balanced.sh' in a balanced fashion. The two primary things this helper script does are:

    1. Starts the TLB server (Partitions need a server to post/pull data, this server started by the helper script is equivallent to the remote server in your real setup, the URL to which is provided to partitions). This server is started before the first partition starts and is terminated after the last partition finishes.
    2. Executes a loop, which loops as many times as the number of partitions. Each run of this loop sets a different partition number and invokes a project sperific build task(i.e. an Ant task for ant_junit project and a Rake task for rspec2_example).

This script uses TLB to makes 2 partitions of these tests, and executes them serially(not parallely) on the local machine. In a real situation each one of these partitions will be executed on a different machine(or by a different process) parallely. The helper script executes them serially only to demonstrate partitioning/re-ordering.

Sample projects directory is bundled alongwith every release for users to see and play with. Its usually a good idea to borrow build script configuration from the example project that matches your environment.


Useful Links
------------

http://test-load-balancer.github.com - Contains detailed documentation(TLB concepts, configuration reference, quick start and more), including documentation for the previous releases and other sub-projects(like tlb-ruby support project, etc).

http://github.com/test-load-balancer - The Github organization under which all the TLB projects are hosted. 

http://github.com/test-load-balancer/sample_projects - Contains the sample implementation of TLB across different supported platforms and test/build frameworks. We tag it for every release we make.

http://code.google.com/p/tlb/issues - TLB issue tracker. Please use this page to report any bugs or submit feature requests/enhancements etc.


License
-------

TLB is a BSD licensed software.


Contact Us
----------

TLB development team can be reached at 'test-load-balancer@googlegroups.com'. Please check http://test-load-balancer.github.com/contact_us.html for details.