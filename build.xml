<project name="tlb" basedir="." default="all">
    <property name="src.dir" location="src"/>
    <property name="test.dir" location="test"/>
    <property name="test-resources.dir" location="${test.dir}/resources"/>
    <property name="integration-test.dir" location="integration-test"/>
    <property name="lib.dir" location="lib"/>
    <property name="test-lib.dir" location="test/lib"/>
    <property name="build_lib.dir" location="build_lib"/>
    <property name="target.dir" location="target"/>
    <property name="classes.dir" location="${target.dir}/classes"/>
    <property name="emma.dir" location="${target.dir}/emma"/>
    <property name="test-classes.dir" location="${target.dir}/test-classes"/>
    <property name="integration-test-classes.dir" location="${target.dir}/integration-test-classes"/>
    <property name="reports.dir" location="${target.dir}/reports"/>
    <property name="test-target-resources.dir" location="${test-classes.dir}/resources"/>

    <path id="dependencies">
        <fileset dir="${lib.dir}" includes="*.jar"/>
    </path>

    <path id="src.classpath">
        <path refid="dependencies"/>
        <pathelement path="${classes.dir}"/>
    </path>

    <path id="test.classpath">
        <path refid="src.classpath"/>
        <pathelement path="${test-classes.dir}"/>
        <fileset dir="${test-lib.dir}" includes="*.jar"/>
    </path>

    <path id="integration-test.classpath">
        <path refid="src.classpath"/>
        <pathelement path="${integration-test-classes.dir}"/>
        <fileset dir="${test-lib.dir}" includes="*.jar"/>
    </path>

    <path id="dog.food.classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${target.dir}" includes="tlb*.jar"/>
    </path>

    <path id="emma.classpath">
        <pathelement location="${build_lib.dir}/emma-2.0.5312.jar"/>
        <pathelement location="${build_lib.dir}/emma_ant-2.0.5312.jar"/>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.classpath"/>

    <property name="one-jar.dist.dir" value="./dist"/>
    <property name="one-jar.version" value="0.96"/>

    <taskdef name="onejar" classname="com.simontuffs.onejar.ant.OneJarTask">
        <classpath>
            <pathelement location="${build_lib.dir}/one-jar-ant-task-0.96.jar"/>
        </classpath>
    </taskdef>

    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test-classes.dir}"/>
        <mkdir dir="${integration-test-classes.dir}"/>
        <mkdir dir="${reports.dir}"/>
    </target>

    <target name="clean">
        <delete dir="${target.dir}" includeemptydirs="true"/>
    </target>

    <target name="compile" depends="init">
        <javac destdir="${classes.dir}" target="1.5" source="1.5" debug="true" includeantruntime="false">
            <classpath refid="src.classpath"/>
            <src path="${src.dir}"/>
        </javac>
    </target>

    <target name="compile-tests" depends="compile, init">
        <javac destdir="${test-classes.dir}" target="1.5" source="1.5" includeantruntime="false">
            <classpath refid="test.classpath"/>
            <src path="${test.dir}"/>
        </javac>
        <copy todir="${test-target-resources.dir}">
            <fileset dir="${test-resources.dir}"/>
        </copy>
    </target>

    <target name="compile-integration-tests" depends="compile, init">
        <javac destdir="${integration-test-classes.dir}" target="1.5" source="1.5">
            <classpath refid="integration-test.classpath"/>
            <src path="${integration-test.dir}"/>
        </javac>
    </target>

    <target name="-load.short.rev">
        <exec executable="git" outputproperty="short_rev">
            <arg line="describe --always"/>
        </exec>
        <property name="tlb.basename" value="tlb-g${short_rev}"/>
        <property name="tlb.all.basename" value="tlb-all-g${short_rev}"/>
        <property name="tlb.jar.name" value="${tlb.basename}.jar"/>
        <property name="tlb.all.jar.name" value="${tlb.all.basename}.jar"/>
    </target>

    <target name="package.src" depends="init, -load.short.rev">
        <jar destfile="${target.dir}/tlb-g${short_rev}-src.jar">
            <fileset dir="src"/>
        </jar>
    </target>

    <target name="package.jar" depends="init, compile, -load.short.rev">
        <property name="tlb_jar" value="${target.dir}/${tlb.jar.name}"/>
        <jar destfile="${tlb_jar}">
            <fileset dir="${classes.dir}"/>
            <fileset dir="${src.dir}">
                <include name="commons-logging.properties"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="tlb.Main"/>
            </manifest>
        </jar>

        <onejar destfile="${target.dir}/${tlb.all.jar.name}">
            <main jar="${tlb_jar}"/>
            <lib>
                <fileset dir="${lib.dir}"/>
            </lib>
        </onejar>
    </target>

    <target name="package" depends="clean, package.src, package.jar"/>

    <target name="zip-all" depends="package, -load.short.rev">
        <property name="dest_dir" location="${target.dir}/tlb_all_dist"/>
        <property name="archive_dir" location="${dest_dir}/${tlb.all.basename}"/>
        <property name="tar" location="${target.dir}/${tlb.all.basename}.tar"/>
        <mkdir dir="${archive_dir}" />
        <copy todir="${archive_dir}">
            <fileset dir="${basedir}" includes="*.sh" />
            <fileset dir="${target.dir}" includes="${tlb.all.jar.name}" />
        </copy>
        <tar basedir="${dest_dir}" destfile="${tar}"/>
        <bzip2 src="${tar}" destfile="${target.dir}/${tlb.all.basename}.tar.bz2"/>
        <delete dir="${tar}" />
        <delete dir="${dest_dir}" />
    </target>

    <target name="zip" depends="package">
        <property name="dest_dir" location="${target.dir}/tlb_client_dist"/>
        <property name="archive_dir" location="${dest_dir}/${tlb.basename}"/>
        <property name="tar" location="${target.dir}/${tlb.basename}.tar"/>
        <mkdir dir="${archive_dir}" />
        <copy todir="${archive_dir}">
            <fileset dir="${target.dir}" includes="${tlb.jar.name}" />
        </copy>
        <copy todir="${archive_dir}/lib">
            <fileset dir="${lib.dir}" includes="*.jar" />
        </copy>
        <tar basedir="${dest_dir}" destfile="${tar}"/>
        <bzip2 src="${tar}" destfile="${target.dir}/${tlb.basename}.tar.bz2"/>
        <delete dir="${tar}" />
        <delete dir="${dest_dir}" />
    </target>

    <target name="emma.instr" depends="compile">
        <sequential>
            <mkdir dir="${emma.dir}"/>
            <property name="junit.fail.on.error" value="false"/>
            <emma enabled="true">
                <instr instrpath="${classes.dir}" destdir="${emma.dir}" metadatafile="${emma.dir}/metadata.emma" merge="true"/>
            </emma>
        </sequential>
    </target>

    <target name="test" depends="compile, compile-tests">
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" fork="true">
            <classpath location="${emma.dir}"/>
            <classpath refid="test.classpath"/>

            <classpath refid="emma.classpath"/>

            <jvmarg value="-Demma.coverage.out.file=${emma.dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>

            <batchtest todir="${reports.dir}">
                <fileset dir="${test-classes.dir}" includes="**/*Test.class*"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>

    <target name="run_balancer" depends="compile">
        <java classname="tlb.Main" fork="true">
            <env key="TLB_URL" value="http://localhost:7019"/>
            <env key="TLB_JOB_NAME" value="foo"/>
            <env key="PARTITION_NUMBER" value="1"/>
            <env key="TOTAL_PARTITIONS" value="2"/>
            <env key="JOB_VERSION" value="1.1"/>
            <env key="TLB_CRITERIA" value="tlb.splitter.CountBasedTestSplitterCriteria"/>
            <env key="TALK_TO_SERVICE" value="tlb.service.TalkToTlbServer"/>
            <env key="TLB_BALANCER_PORT" value="${random.balancer.port}"/>
            <env key="TLB_APP" value="tlb.balancer.BalancerInitializer"/>

            <classpath refid="src.classpath"/>
        </java>
    </target>

    <target name="coverage" depends="emma.instr, test">
        <emma enabled="true">
            <report sort="+name" metrics="method:85,block:90,line:90,class:90" sourcepath="${src.dir}">
                <fileset dir="${emma.dir}">
                    <include name="**/*.emma"/>
                </fileset>
                <html outfile="${emma.dir}/coverage.html"/>
                <xml outfile="${emma.dir}/coverage.xml"/>
            </report>
        </emma>
    </target>

    <target name="test.count_balanced" depends="package, compile-tests">
        <typedef name="load-balanced-fileset" classname="tlb.ant.LoadBalancedFileSet" classpathref="dog.food.classpath"/>
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath refid="test.classpath"/>
            <batchtest todir="${reports.dir}">
                <load-balanced-fileset dir="${test-classes.dir}" includes="**/*Test.class"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>

    <target name="test.time_balanced" depends="package, compile-tests">
        <typedef name="load-balanced-fileset" classname="tlb.ant.LoadBalancedFileSet" classpathref="dog.food.classpath"/>
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath refid="test.classpath"/>
            <batchtest todir="${reports.dir}">
                <load-balanced-fileset dir="${test-classes.dir}" includes="**/*Test.class"/>
                <formatter classname="tlb.ant.JunitDataRecorder"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>

    <target name="integration-test.time_balanced" depends="package, compile-integration-tests">
        <description>
            Running integration tests makes sence only in a load balanced job(in cruise).
            These tests are meant to play dummy 'to be run' tests, that tlb is being used to balance.
            These do not test much themselfs.
        </description>
        <typedef name="load-balanced-fileset" classname="tlb.ant.LoadBalancedFileSet" classpathref="dog.food.classpath"/>
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath refid="integration-test.classpath"/>
            <batchtest todir="${reports.dir}">
                <load-balanced-fileset dir="${integration-test-classes.dir}" includes="**/*Test.class"/>
                <formatter classname="tlb.ant.JunitDataRecorder"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>

    <target name="server" depends="package.jar">
        <java fork="true" classname="tlb.Main">
            <classpath path="${tlb_jar}"/>
            <classpath refid="dependencies"/>
        </java>
    </target>

    <target name="all" depends="clean, coverage, package"/>
</project>
