<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY manifest SYSTEM "misc/manifest.xml">
        <!ENTITY extension-name SYSTEM "misc/extension-name.xml">
]>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="tlb" basedir="." default="all">
    <property name="lib.dir" location="${basedir}/lib"/>
    <property name="test.lib.dir" location="${lib.dir}/test"/>

    <property name="target.dir" location="${basedir}/target"/>

    <property name="core.dir" location="${basedir}/core"/>
    <property name="balancer.dir" location="${basedir}/balancer"/>
    <property name="restlet.dir" location="${basedir}/restlet"/>
    <property name="alien.dir" location="${basedir}/alien"/>
    <property name="java.dir" location="${basedir}/java"/>
    <property name="server.dir" location="${basedir}/server"/>

    <property name="dist.dir" location="${target.dir}/dist"/>
    <property name="emma.dir" location="${target.dir}/emma"/>
    <property name="emma.version" value="2.0.5312"/>

    <property name="title" value="TLB - Test Load Balancer"/>
    <property name="vendor" value="TLB Core Team - Janmejay Singh, Pavan KS"/><!-- follow alpha first name -->
    <property name="license" value="2-clause BSD License"/>
    <property name="description" value="A tool to load-balance tests across multiple processes or machines"/>

    <path id="test.dependencies">
        <fileset dir="${test.lib.dir}" includes="*.jar"/>
    </path>

    <!--path id="dog.food.classpath">
        <fileset dir="${prod-lib.dir}" includes="*.jar"/>
        <fileset dir="${target.dir}" includes="tlb*.jar"/>
    </path-->

    <path id="emma.classpath">
        <pathelement location="${build_lib.dir}/emma-${emma.version}.jar"/>
        <pathelement location="${build_lib.dir}/emma_ant-${emma.version}.jar"/>
    </path>

    <property name="ivy.install.version" value="2.2.0" />
    <condition property="ivy.home" value="/${user.home}/.ant" else="${user.home}/.ant">
        <os family="windows" />
    </condition>
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="resolve" depends="init-ivy">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" sync="true"/>
    </target>

    <import file="${core.dir}/core-build.xml"/>
    <import file="${balancer.dir}/balancer-build.xml"/>
    <import file="${restlet.dir}/restlet-build.xml"/>
    <import file="${alien.dir}/alien-build.xml"/>
    <import file="${java.dir}/java-build.xml"/>
    <import file="${server.dir}/server-build.xml"/>

    <target name="init" depends="resolve, core.init, balancer.init, java.init, restlet.init, alien.init, server.init">
        <mkdir dir="${target.dir}"/>
        <!--taskdef resource="emma_ant.properties" classpathref="emma.classpath"/>

        <property name="one-jar.dist.dir" value="./dist"/>
        <property name="one-jar.version" value="0.96"/>

        <taskdef name="onejar" classname="com.simontuffs.onejar.ant.OneJarTask">
            <classpath>
                <pathelement location="${build_lib.dir}/one-jar-ant-task-${one-jar.version}.jar"/>
            </classpath>
        </taskdef-->
        <tstamp>
            <format property="build-time" pattern="MMM/dd/yyyy hh:mm aa"  timezone="${ENV.TZ}"/>
        </tstamp>
        <property name="build-time-with-timezone" value="${build-time} UTC"/>
    </target>

    <target name="clean">
        <delete dir="${target.dir}" includeemptydirs="true"/>
    </target>


    <target name="-load.short.rev">
        <exec executable="git" outputproperty="short_rev">
            <arg line="describe --always"/>
        </exec>
        <property name="tlb.basename" value="tlb-g${short_rev}"/>
        <property name="tlb.all.basename" value="tlb-all-g${short_rev}"/>
        <property name="tlb.jar.name" value="${tlb.basename}.jar"/>
        <property name="tlb.all.jar.name" value="${tlb.all.basename}.jar"/>
        <property name="tlb.src.jar.name" value="${tlb.basename}-src.jar"/>
    </target>

    <macrodef name="tlb-jar">
        <attribute name="dest"/>
        <element name="extra-manifest" optional="true"/>
        <element name="content"/>
        <sequential>
            <jar destfile="@{dest}">
                <manifest>
                    <extra-manifest/>
                    <section name="tlb/">
                        <attribute name="Sealed" value="true"/>
                        &extension-name;
                    </section>
                    &manifest;
                </manifest>
                <content/>
            </jar>
        </sequential>
    </macrodef>

    <target name="package.src" depends="init, -load.short.rev">
        <property name="tlb.src.jar" value="${target.dir}/${tlb.src.jar.name}"/>
        <tlb-jar dest="${tlb.src.jar}">
            <content>
                <fileset dir="src"/>
            </content>
        </tlb-jar>
    </target>

<!--
    <target name="package.jar" depends="init, compile, -load.short.rev">
        <property name="tlb_jar" value="${target.dir}/${tlb.jar.name}"/>
        <tlb-jar dest="${tlb_jar}">
            <extra-manifest>
                <attribute name="Main-Class" value="tlb.Main"/>
            </extra-manifest>
            <content>
                <fileset dir="${classes.dir}"/>
                <fileset dir="${src.dir}">
                    <include name="log4j.properties"/>
                </fileset>
            </content>
        </tlb-jar>

        <onejar destfile="${target.dir}/${tlb.all.jar.name}">
            <manifest>
                &extension-name;
                &manifest;
            </manifest>
            <main jar="${tlb_jar}"/>
            <lib>
                <fileset dir="${prod-lib.dir}"/>
            </lib>
        </onejar>
    </target>
-->

    <!--<target name="package" depends="clean, package.src, package.jar"/>-->

    <target name="prepare-dist">
        <mkdir dir="${dist.dir}"/>
    </target>

<!--
    <target name="package-dist-archive" depends="package, prepare-dist, -load.short.rev">
        <property name="archive.name" location="${dist.dir}/${tlb.all.basename}.tar.gz"/>
        <tar destfile="${archive.name}" compression="gzip">
            <tarfileset dir="${basedir}" prefix="${tlb.all.basename}" >
                <include name="*.bat"/>
                <include name="*.cmd"/>
                <include name="LICENSE"/>
            </tarfileset>
            <tarfileset dir="${basedir}" prefix="${tlb.all.basename}" filemode="0755">
                <include name="*.sh"/>
            </tarfileset>
            <tarfileset dir="${basedir}" fullpath="${tlb.all.basename}/README">
                <include name="README.release"/>
            </tarfileset>
            <tarfileset dir="${target.dir}" prefix="${tlb.all.basename}">
                <include name="*.jar"/>
            </tarfileset>
            <tarfileset dir="${prod-lib.dir}" prefix="${tlb.all.basename}/libs">
                <include name="*.jar"/>
            </tarfileset>
        </tar>
    </target>
-->

    <target name="copy-help" depends="prepare-dist">
        <property name="dist.readme" value="${dist.dir}/README"/>
        <copyfile src="${basedir}/README.release" dest="${dist.readme}"/>
    </target>

    <macrodef name="sign">
        <attribute name="path"/>
        <sequential>
            <exec command="gpg">
                <arg value="-ba"/>
                <arg value="@{path}"/>
            </exec>
        </sequential>
    </macrodef>

<!--
    <target name="sign-dist" depends="package-dist-archive, copy-help">
        <sign path="${archive.name}"/>
        <sign path="${dist.readme}"/>
    </target>
-->

    <!--<target name="dist" depends="package-dist-archive, copy-help, sign-dist"/>-->

<!--
    <target name="emma.instr" depends="compile">
        <sequential>
            <mkdir dir="${emma.dir}"/>
            <property name="junit.fail.on.error" value="false"/>
            <emma enabled="true">
                <instr instrpath="${classes.dir}" destdir="${emma.dir}" metadatafile="${emma.dir}/metadata.emma" merge="true"/>
            </emma>
        </sequential>
    </target>
-->

    <target name="test" depends="init, core.test, balancer.test, java.test, restlet.test, alien.test, server.test"/>

<!--
    <target name="run_balancer" depends="compile">
        <java classname="tlb.Main" fork="true">
            <env key="TLB_BASE_URL" value="http://localhost:7019"/>
            <env key="TLB_JOB_NAME" value="foo"/>
            <env key="TLB_PARTITION_NUMBER" value="1"/>
            <env key="TLB_TOTAL_PARTITIONS" value="2"/>
            <env key="TLB_JOB_VERSION" value="1.1"/>
            <env key="TLB_SPLITTER" value="tlb.splitter.CountBasedTestSplitter"/>
            <env key="TYPE_OF_SERVER" value="tlb.service.TlbServer"/>
            <env key="TLB_BALANCER_PORT" value="${random.balancer.port}"/>
            <env key="TLB_APP" value="tlb.balancer.BalancerInitializer"/>

            <classpath refid="src.classpath"/>
        </java>
    </target>
-->

<!--
    <target name="coverage" depends="emma.instr, test">
        <emma enabled="true">
            <report sort="+name" metrics="method:85,block:90,line:90,class:90" sourcepath="${src.dir}">
                <fileset dir="${emma.dir}">
                    <include name="**/*.emma"/>
                </fileset>
                <html outfile="${emma.dir}/coverage.html"/>
                <xml outfile="${emma.dir}/coverage.xml"/>
            </report>
        </emma>
    </target>
-->

<!--
    <target name="test.count_balanced" depends="package, compile-tests">
        <typedef name="load-balanced-fileset" classname="tlb.ant.LoadBalancedFileSet" classpathref="dog.food.classpath"/>
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath refid="test.classpath"/>
            <batchtest todir="${reports.dir}">
                <load-balanced-fileset dir="${test-classes.dir}" includes="**/*Test.class"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>
-->

<!--
    <target name="test.time_balanced" depends="package, compile-tests">
        <typedef name="load-balanced-fileset" classname="tlb.ant.LoadBalancedFileSet" classpathref="dog.food.classpath"/>
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath refid="test.classpath"/>
            <batchtest todir="${reports.dir}">
                <load-balanced-fileset dir="${test-classes.dir}" includes="**/*Test.class"/>
                <formatter classname="tlb.ant.JunitDataRecorder"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>
-->

<!--
    <target name="integration-test.time_balanced" depends="package, compile-integration-tests">
        <description>
            Running integration tests makes sence only in a load balanced job(in cruise).
            These tests are meant to play dummy 'to be run' tests, that tlb is being used to balance.
            These do not test much themselfs.
        </description>
        <typedef name="load-balanced-fileset" classname="tlb.ant.LoadBalancedFileSet" classpathref="dog.food.classpath"/>
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true" fork="true">
            <classpath refid="integration-test.classpath"/>
            <batchtest todir="${reports.dir}">
                <load-balanced-fileset dir="${integration-test-classes.dir}" includes="**/*Test.class"/>
                <formatter classname="tlb.ant.JunitDataRecorder"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>
-->

<!--
    <target name="server" depends="package.jar">
        <java fork="true" classname="tlb.Main">
            <classpath path="${tlb_jar}"/>
            <classpath refid="dependencies"/>
        </java>
    </target>
-->

    <!--<target name="all" depends="clean, coverage, package"/>-->
</project>
